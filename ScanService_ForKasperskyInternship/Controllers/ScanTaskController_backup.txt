using Microsoft.AspNetCore.Mvc;
using ScanService_ForKasperskyInternship.Models;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace ScanService_ForKasperskyInternship.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class ScanTaskController : Controller
    {
        // Словарь хранит для каждой задачи отчет о сканировании или "задача еще выполняется".
        private static Dictionary<int, TaskAnswer> taskAnswers = new Dictionary<int, TaskAnswer>();

        [HttpGet("create-new-task")]
        public IActionResult CreateNewTask([FromQuery(Name = "path-to-dir")] string pathToDir)
        {
            // Предполагается, что pathToDir корректный (проверяется в консольном приложении ScanUtil).
            int newTaskIndex = taskAnswers.Count;
            taskAnswers.Add(newTaskIndex, new TaskAnswer("Scan task in progress, please wait"));
            Task.Run(() => ScanDirectoryAsync(new DirectoryInfo(pathToDir), newTaskIndex));
            return Ok("Scan task was created with ID: " + newTaskIndex);
        }

        [NonAction]
        public async Task ScanDirectoryAsync(DirectoryInfo dir, int taskIndex)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            DirScanStatus dirScanStatus = new DirScanStatus(dir);
            var fileStatuses = await Task.WhenAll(dir.GetFiles().Select(file => Task.Run(() => ScanFileInParallel(file))));
            dirScanStatus.AddStatuses(fileStatuses);

            stopWatch.Stop();
            dirScanStatus.ExecutionTime = stopWatch.Elapsed.ToString();
            taskAnswers[taskIndex] = new TaskAnswer(dirScanStatus);
        }

        [NonAction]
        public FileScanStatus ScanFileInParallel(FileInfo file)
        {
            FileScanStatus scanStatus = FileScanStatus.Ok;
            bool lookForJsSuspiciosContent = file.Extension == ".js" ? true : false;

            var checkFileForSuspiciosContent = Task.Run(() =>
            {
                Parallel.ForEach(System.IO.File.ReadLines(file.FullName), (line, _, lineNumber) =>
                {
                    if (lookForJsSuspiciosContent && line == SuspiciousContent.JsContent)
                    {
                        scanStatus = FileScanStatus.JsDetected;
                    }
                    else if (line == SuspiciousContent.RmrfContent)
                    {
                        scanStatus = FileScanStatus.RmrfDetected;
                    }
                    else if (line == SuspiciousContent.RundllContent)
                    {
                        scanStatus = FileScanStatus.RundllDetected;
                    }
                });
            });
            Task.WaitAll(checkFileForSuspiciosContent);
            return scanStatus;
        }

        [NonAction]
        public FileScanStatus ScanFile(FileInfo file)
        {
            bool lookForJsSuspiciosContent = file.Extension == ".js" ? true : false;

            try
            {
                using (StreamReader sr = new StreamReader(file.FullName))
                {
                    string line;
                    while ((line = sr.ReadLine()) != null)
                    {
                        if (lookForJsSuspiciosContent && line == SuspiciousContent.JsContent)
                        {
                            return FileScanStatus.JsDetected;
                        }
                        else if (line == SuspiciousContent.RmrfContent)
                        {
                            return FileScanStatus.RmrfDetected;
                        }
                        else if (line == SuspiciousContent.RundllContent)
                        {
                            return FileScanStatus.RundllDetected;
                        }
                    }
                }
            }
            catch (Exception)
            {
                return FileScanStatus.Error;
            }
            return FileScanStatus.Ok;
        }

        [HttpGet("get-task-status")]
        public IActionResult GetTaskStatus([FromQuery(Name = "task-index")] int taskIndex)
        {
            if (taskAnswers.ContainsKey(taskIndex))
            {
                return Ok(taskAnswers[taskIndex]);
            }
            return BadRequest(new TaskAnswer("No task with such index"));
        }
    }
}
